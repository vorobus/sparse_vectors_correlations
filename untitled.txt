import numpy as np

class sparse_vector:
    def __init__(self, indexes, values):
        '''
        indexes: where it is non zero
        values: values of it
        '''
        
        self.indexes = np.array(indexes)
        self.values = np.array(values)
    def __call__(self):
        return self.values

def correlate_sparse_vector(v1,taus):
    ind = v1.indexes
    indeces_shifted = lambda k: (ind-k)[ind>=k]
    indeces_0 = lambda k: ind[ind < max(ind)-k]
    corr = []
    for t in taus:
        a = indeces_0(t)
        b = indeces_shifted(t)
        inds = np.where(a == b)
        corr.append(np.mean(v1[inds]*v1_shifted[inds]))
    return corr        